/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package edu.itsco;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INICIO = 5;
  /** RegularExpression Id. */
  int FIN = 6;
  /** RegularExpression Id. */
  int ENTERO = 7;
  /** RegularExpression Id. */
  int CADENA = 8;
  /** RegularExpression Id. */
  int FLOTANTE = 9;
  /** RegularExpression Id. */
  int VAR = 10;
  /** RegularExpression Id. */
  int ESCRIBIR = 11;
  /** RegularExpression Id. */
  int LEER = 12;
  /** RegularExpression Id. */
  int SI = 13;
  /** RegularExpression Id. */
  int SINO = 14;
  /** RegularExpression Id. */
  int ENTONCES = 15;
  /** RegularExpression Id. */
  int SELECCIONA = 16;
  /** RegularExpression Id. */
  int CASO = 17;
  /** RegularExpression Id. */
  int DEFECTO = 18;
  /** RegularExpression Id. */
  int PARA = 19;
  /** RegularExpression Id. */
  int HASTA = 20;
  /** RegularExpression Id. */
  int SIGUIENTE = 21;
  /** RegularExpression Id. */
  int HACER = 22;
  /** RegularExpression Id. */
  int MIENTRAS = 23;
  /** RegularExpression Id. */
  int SUMA = 24;
  /** RegularExpression Id. */
  int RESTA = 25;
  /** RegularExpression Id. */
  int MULTI = 26;
  /** RegularExpression Id. */
  int DIV = 27;
  /** RegularExpression Id. */
  int MOD = 28;
  /** RegularExpression Id. */
  int MAYOR = 29;
  /** RegularExpression Id. */
  int MENOR = 30;
  /** RegularExpression Id. */
  int IGUAL = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int OR = 33;
  /** RegularExpression Id. */
  int NOT = 34;
  /** RegularExpression Id. */
  int OPP = 35;
  /** RegularExpression Id. */
  int OPC = 36;
  /** RegularExpression Id. */
  int letra = 37;
  /** RegularExpression Id. */
  int digitos = 38;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 39;
  /** RegularExpression Id. */
  int VALOR_ENTERO = 40;
  /** RegularExpression Id. */
  int VALOR_FLOTANTE = 41;
  /** RegularExpression Id. */
  int VALOR_CADENA = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"inicio\"",
    "\"fin\"",
    "\"entero\"",
    "\"cadena\"",
    "\"flotante\"",
    "\"var\"",
    "\"escribir\"",
    "\"leer\"",
    "\"si\"",
    "\"sino\"",
    "\"entonces\"",
    "\"selecciona\"",
    "\"caso\"",
    "\"defecto\"",
    "\"para\"",
    "\"hasta\"",
    "\"siguiente\"",
    "\"hacer\"",
    "\"mientras\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "<letra>",
    "<digitos>",
    "<IDENTIFICADOR>",
    "<VALOR_ENTERO>",
    "<VALOR_FLOTANTE>",
    "<VALOR_CADENA>",
  };

}
