/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.itsco;

public class Parser implements ParserConstants {
  public static void main(String args []) throws ParseException
  {
    Parser parser = new Parser(System.in);//introducir datos desde el teclado    System.out.println("Bienvenidos al COMPILADOR");
    System.out.println("-------------------------------------");
    parser.principal();
    System.out.println("El programa se Compilo correctamente");
  }

  static final public void principal() throws ParseException {
    jj_consume_token(INICIO);
    jj_consume_token(IDENTIFICADOR);
    label_1:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ESCRIBIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case PARA:
      case HACER:
      case MIENTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(FIN);
  }

  static final public void sentencias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      declararVariable();
      break;
    case ESCRIBIR:
      gramaticaEscribir();
      break;
    case LEER:
      gramaticaLeer();
      break;
    case IDENTIFICADOR:
      gramaticaAsignacion();
      break;
    case SI:
      gramaticaSi();
      break;
    case SELECCIONA:
      gramaticaSelecciona();
      break;
    case PARA:
      gramaticaPara();
      break;
    case MIENTRAS:
      gramaticaMientras();
      break;
    case HACER:
      gramaticaHacer();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declararVariable() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(IDENTIFICADOR);
    tipoDato();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      valor();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void tipoDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case FLOTANTE:
      jj_consume_token(FLOTANTE);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR_CADENA:
      jj_consume_token(VALOR_CADENA);
      break;
    case VALOR_ENTERO:
      jj_consume_token(VALOR_ENTERO);
      break;
    case VALOR_FLOTANTE:
      jj_consume_token(VALOR_FLOTANTE);
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaEscribir() throws ParseException {
    jj_consume_token(ESCRIBIR);
    jj_consume_token(OPP);
    valor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(SUMA);
      valor();
    }
    jj_consume_token(OPC);
  }

  static final public void gramaticaLeer() throws ParseException {
    jj_consume_token(LEER);
    jj_consume_token(OPP);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(OPC);
  }

  static final public void gramaticaAsignacion() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IGUAL);
    operacionSimple();
  }

  static final public void operacionSimple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
    case VALOR_ENTERO:
    case VALOR_FLOTANTE:
    case VALOR_CADENA:
      valor();
      break;
    case OPP:
      operacionParentesis();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTI:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      operandoAritmetico();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
      case VALOR_ENTERO:
      case VALOR_FLOTANTE:
      case VALOR_CADENA:
        valor();
        break;
      case OPP:
        operacionParentesis();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void operacionParentesis() throws ParseException {
    jj_consume_token(OPP);
    operacionSimple();
    jj_consume_token(OPC);
  }

  static final public void operandoAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case MULTI:
      jj_consume_token(MULTI);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaSi() throws ParseException {
    jj_consume_token(SI);
    condicion();
    jj_consume_token(ENTONCES);
    label_4:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ESCRIBIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case PARA:
      case HACER:
      case MIENTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINO:
      jj_consume_token(SINO);
      label_5:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case ESCRIBIR:
        case LEER:
        case SI:
        case SELECCIONA:
        case PARA:
        case HACER:
        case MIENTRAS:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SI);
  }

  static final public void condicion() throws ParseException {
    condicionSimple();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      opLogico();
      condicionSimple();
    }
  }

  static final public void condicionSimple() throws ParseException {
    valor();
    opRelacional();
    valor();
  }

  static final public void opLogico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAYOR:
      jj_consume_token(MAYOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
    case MENOR:
      jj_consume_token(MENOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      jj_consume_token(IGUAL);
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(IGUAL);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaSelecciona() throws ParseException {
    jj_consume_token(SELECCIONA);
    jj_consume_token(OPP);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(OPC);
    label_7:
    while (true) {
      jj_consume_token(CASO);
      jj_consume_token(VALOR_ENTERO);
      jj_consume_token(DP);
      sentencias();
      jj_consume_token(ROMPE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFECTO:
      jj_consume_token(DEFECTO);
      jj_consume_token(DP);
      sentencias();
      jj_consume_token(ROMPE);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SELECCIONA);
  }

  static final public void gramaticaPara() throws ParseException {
    jj_consume_token(PARA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IGUAL);
    jj_consume_token(VALOR_ENTERO);
    jj_consume_token(HASTA);
    jj_consume_token(VALOR_ENTERO);
    label_8:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ESCRIBIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case PARA:
      case HACER:
      case MIENTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(SIGUIENTE);
  }

  static final public void gramaticaMientras() throws ParseException {
    jj_consume_token(MIENTRAS);
    jj_consume_token(OPP);
    condicion();
    jj_consume_token(OPC);
    label_9:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ESCRIBIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case PARA:
      case HACER:
      case MIENTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(FIN);
    jj_consume_token(MIENTRAS);
  }

  static final public void gramaticaHacer() throws ParseException {
    jj_consume_token(HACER);
    label_10:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ESCRIBIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case PARA:
      case HACER:
      case MIENTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
    }
    jj_consume_token(FIN);
    jj_consume_token(MIENTRAS);
    jj_consume_token(OPP);
    condicion();
    jj_consume_token(OPC);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1913c00,0x1913c00,0x0,0x380,0x0,0x2000000,0x0,0x3e000000,0x0,0x3e000000,0x1913c00,0x1913c00,0x4000,0x0,0x0,0x0,0x0,0xc0000000,0x20000,0x40000,0x1913c00,0x1913c00,0x1913c00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200,0x200,0x1,0x0,0x1e00,0x0,0x1e10,0x0,0x1e10,0x0,0x200,0x200,0x0,0x6,0x6,0x1,0x1,0x9,0x0,0x0,0x200,0x200,0x200,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
